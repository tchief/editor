{"version":3,"sources":["types/index.ts","components/Shape.tsx","components/Square.tsx","components/Circle.tsx","components/ShapeFactory.tsx","hooks/useDrag.ts","components/Board.tsx","components/Editor.tsx","components/Toggle.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_COLOR","getRandomPosition","x","Math","random","window","innerWidth","y","innerHeight","Point","Square","color","center","side","kind","id","uuidv4","Circle","radius","ShapeStyled","styled","div","props","backgroundColor","border","isSelected","selectedColor","undefined","zIndex","position","top","left","defaultProps","SquareComponent","width","height","borderRadius","CircleComponent","NotSupportedComponent","ShapeFactory","useState","setPosition","isPressed","setIsPressed","ref","useRef","useEffect","onMouseUp","document","removeEventListener","onMouseMove","onMouseDown","addEventListener","e","movementX","movementY","current","style","transform","useDrag","handleMouseDown","toggleSelect","stopPropagation","item","Container","Board","items","selectedId","map","ColumnContainer","Button","button","Switch","type","checked","onChange","label","Editor","setItems","setSelectedId","setColor","isRandomSize","setIsRandomSize","isRandomColor","setIsRandomColor","handleAdd","shape","handleRemove","filter","i","cleanScreen","addSquare","getColor","randomSize","addCircle","size","toggleRandomSize","toggleRandomColor","deps","useHotkeys","onClick","onChangeComplete","c","hex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02814fd5.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nexport const SQUARE_SIDE = 100;\nexport const CIRCLE_RADIUS = 75;\nexport const DEFAULT_COLOR = \"#ff0f58\";\nexport const MAX_SIDE = 150;\nexport const MIN_SIDE = 10;\n\nexport const getRandomSize = () => Math.random() * (MAX_SIDE - MIN_SIDE) + MIN_SIDE;\nexport const getRandomColor = () => `rgb(${[1, 2, 3].map((x) => (Math.random() * 256) | 0)})`;\nexport const getRandomPosition = () => ({\n  x: Math.random() * window.innerWidth * 0.8,\n  y: Math.random() * window.innerHeight * 0.8,\n});\n\nexport type ShapeId = string;\nexport class Point {\n  constructor(public x: number = 0, public y: number = 0) {}\n}\n\nexport class Square {\n  public readonly kind = \"square\";\n  public readonly id: ShapeId = uuidv4();\n\n  constructor(\n    public color: string = DEFAULT_COLOR,\n    public center: Point = new Point(),\n    public side: number = SQUARE_SIDE\n  ) {}\n}\n\nexport class Circle {\n  public readonly kind = \"circle\";\n  public readonly id: ShapeId = uuidv4();\n\n  constructor(\n    public color: string = DEFAULT_COLOR,\n    public center: Point = new Point(),\n    public radius: number = CIRCLE_RADIUS\n  ) {}\n}\n\nexport type Shape = Circle | Square;\n","import styled from \"@emotion/styled\";\nimport { DEFAULT_COLOR, Point } from \"../types\";\n\nexport interface ShapeProps {\n  color?: string;\n  selectedColor?: string;\n  isSelected?: boolean;\n  center: Point;\n}\n\nexport const ShapeStyled = styled.div<ShapeProps>((props) => ({\n  backgroundColor: props.color,\n  border: props.isSelected ? `0.2rem solid ${props.selectedColor}` : undefined,\n  zIndex: props.isSelected ? 2 : 1,\n  position: \"absolute\",\n  top: props.center.y, //window.innerHeight / 2,\n  left: props.center.x //window.innerWidth / 2,\n}));\n\nShapeStyled.defaultProps = {\n  color: DEFAULT_COLOR,\n  selectedColor: \"violet\",\n};\n","import styled from \"styled-components/macro\";\nimport { ShapeProps, ShapeStyled } from \"./Shape\";\n\ninterface SquareProps extends ShapeProps {\n  side: number;\n}\n\nexport const SquareComponent = styled(ShapeStyled)<SquareProps>((props) => ({\n  width: props.side,\n  height: props.side,\n  borderRadius: \"5%\",\n}));\n","import styled from \"styled-components/macro\";\nimport { ShapeProps, ShapeStyled } from \"./Shape\";\n\ninterface CircleProps extends ShapeProps {\n  radius: number;\n}\n\nexport const CircleComponent = styled(ShapeStyled)<CircleProps>((props) => ({\n  width: props.radius * 2,\n  height: props.radius * 2,\n  borderRadius: \"50%\",\n}));\n","import { useDrag } from \"../hooks/useDrag\";\nimport { Shape, Square, Circle, ShapeId } from \"../types\";\nimport { ShapeProps } from \"./Shape\";\nimport { SquareComponent } from \"./Square\";\nimport { CircleComponent } from \"./Circle\";\n\nconst NotSupportedComponent = <div>This shape is not yet supported.</div>;\n\nexport interface ShapeFactoryProps {\n  id: ShapeId;\n  toggleSelect: (id: ShapeId) => void;\n  item: Shape;\n}\n\nexport const ShapeFactory = (props: ShapeProps & ShapeFactoryProps) => {\n  const { ref } = useDrag();\n  const handleMouseDown = (e: any) => {\n    props.toggleSelect(props.id);\n    e.stopPropagation();\n  };\n\n  switch (true) {\n    case props.item instanceof Square:\n      return <SquareComponent ref={ref} onMouseDown={handleMouseDown} {...(props.item as Square)} {...props} />;\n    case props.item instanceof Circle:\n      return <CircleComponent ref={ref} onMouseDown={handleMouseDown} {...(props.item as Circle)} {...props} />;\n    default:\n      return NotSupportedComponent;\n  }\n};\n","import { useEffect, useRef, useState } from \"react\";\n\nexport const useDrag = () => {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isPressed, setIsPressed] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const onMouseUp = () => {\n      setIsPressed(false);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n      document.removeEventListener(\"mousemove\", onMouseMove);\n    };\n\n    const onMouseDown = () => {\n      setIsPressed(true);\n      document.addEventListener(\"mouseup\", onMouseUp);\n      document.addEventListener(\"mousemove\", onMouseMove);\n    };\n    \n    const onMouseMove = (e: MouseEvent) => {\n      position.x += e.movementX;\n      position.y += e.movementY;\n      if (ref.current) ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`;\n      setPosition({x: position.x, y: position.y});\n    };\n\n    const current = ref.current;\n    current?.addEventListener(\"mousedown\", onMouseDown);\n    return () => {\n      current?.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [ref, position]);\n\n  return { ref, position, isPressed };\n};\n","import styled from \"@emotion/styled\";\nimport { Shape, ShapeId } from \"../types\";\nimport { ShapeFactory } from \"./ShapeFactory\";\n\nconst Container = styled.div`\n  height: 80vh;\n`;\n\ninterface BoardProps {\n  items: Shape[];\n  selectedId: ShapeId | undefined;\n  toggleSelect: (id: ShapeId | undefined) => void;\n}\n\nconst Board = ({ items, selectedId, toggleSelect }: BoardProps) => {\n  return (\n    <Container onMouseDown={(e) => toggleSelect(undefined)}>\n      {items.map((item) => {\n        return (\n          <ShapeFactory\n            key={item.id}\n            item={item}\n            isSelected={item.id === selectedId}\n            toggleSelect={toggleSelect}\n            {...item}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Board;\n","import { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport {\n  Circle,\n  Shape,\n  ShapeId,\n  Square,\n  getRandomColor,\n  getRandomPosition,\n  getRandomSize,\n  DEFAULT_COLOR,\n  SQUARE_SIDE,\n  CIRCLE_RADIUS,\n} from \"./../types\";\nimport Board from \"./Board\";\nimport { TwitterPicker } from \"react-color\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { Toggle } from \"./Toggle\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 1em;\n`;\n\nconst ColumnContainer = styled(Container)`\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: flex-start;\n`;\n\nconst Button = styled.button`\n  margin: 0.25em;\n  padding: 0.5em;\n  flex: 1;\n  min-width: 10em;\n`;\n\nconst Switch = styled(Toggle)`\n  margin: 2em;\n  padding: 0.5em;\n`;\n\nexport const Editor = () => {\n  const [items, setItems] = useState<Shape[]>([]);\n  const [selectedId, setSelectedId] = useState<ShapeId>();\n  const [color, setColor] = useState<string>(DEFAULT_COLOR);\n  const [isRandomSize, setIsRandomSize] = useState(false);\n  const [isRandomColor, setIsRandomColor] = useState(false);\n\n  const handleAdd = (shape: Shape) => setItems([shape, ...items]);\n  const handleRemove = () => selectedId && setItems(items.filter((i) => i.id !== selectedId));\n\n  const cleanScreen = () => setItems([]);\n  const addSquare = () => handleAdd(new Square(getColor(), getRandomPosition(), randomSize(SQUARE_SIDE)));\n  const addCircle = () => handleAdd(new Circle(getColor(), getRandomPosition(), randomSize(CIRCLE_RADIUS)));\n  const getColor = () => {\n    if (isRandomColor) setColor(getRandomColor());\n    return color;\n  };\n  const randomSize = (size: number) => (isRandomSize ? getRandomSize() : size);\n  const toggleRandomSize = () => setIsRandomSize(!isRandomSize);\n  const toggleRandomColor = () => setIsRandomColor(!isRandomColor);\n\n  const deps = [color, items, isRandomSize, isRandomColor];\n  useHotkeys(\"s\", addSquare, deps);\n  useHotkeys(\"c\", addCircle, deps);\n  useHotkeys(\"q\", toggleRandomColor, deps);\n  useHotkeys(\"w\", toggleRandomSize, deps);\n  useHotkeys(\"z\", cleanScreen, deps);\n  useHotkeys(\"x\", () => { handleRemove(); }, deps);\n\n  return (\n    <>\n      <Container>\n        <ColumnContainer>\n          <Button onClick={addSquare}>Add square</Button>\n          <Button onClick={addCircle}>Add circle</Button>\n        </ColumnContainer>\n        <ColumnContainer>\n          <Button onClick={handleRemove}>Remove node</Button>\n          <Button onClick={cleanScreen}>Remove all</Button>\n        </ColumnContainer>\n        <TwitterPicker color={color} onChangeComplete={(c) => setColor(c.hex)} />\n        <ColumnContainer>\n          <Switch checked={isRandomSize} onChange={toggleRandomSize} label=\"Random size\" />\n          <Switch checked={isRandomColor} onChange={toggleRandomColor} label=\"Random color\" />\n        </ColumnContainer>\n      </Container>\n      <Board items={items} selectedId={selectedId} toggleSelect={setSelectedId}></Board>\n    </>\n  );\n};\n","export const Toggle = (props: { checked: boolean; label: string; onChange: (event: any) => void }) => {\n  return (\n    <label>\n      <input type=\"checkbox\" checked={props.checked} onChange={props.onChange} />\n      {props.label}\n    </label>\n  );\n};\n","import { Editor } from \"./components/Editor\";\n\nfunction App() {\n  return <Editor></Editor>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}